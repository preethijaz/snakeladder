{"version":3,"sources":["Square.js","Snake.js","Snakeladder.js","index.js"],"names":["Square","a","className","style","backgroundColor","this","props","value","length","player","React","Component","Snake","Snakeladder","start","useState","setPlayer","xvalue","setValuex","yvalue","setValuey","scorex","setScorex","scorey","setScorey","result","setResult","checkLadderSnake","cellno","cell","row","cellarr","col","push","onClick","dicevalue","Math","floor","random","x","y","sqaurearr","square","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7bff58dc.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Square extends React.Component {\r\n  render() {\r\n    let a = [\"white\", \"darksalmon\"];\r\n    return (\r\n      <div\r\n        className=\"cell\"\r\n        style={{ backgroundColor: a[this.props.value % a.length] }}\r\n      >\r\n        <div className=\"player\">{this.props.player}</div>\r\n        <div className=\"value\">{this.props.value}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Square;\r\n","import React from \"react\";\r\n//import snakeimg from \"./snake2.png\";\r\nimport \"./App.css\";\r\nclass Snake extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"snakes\">\r\n        <div className=\"snake-1 snake\"></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Snake;\r\n","import \"./App.css\";\nimport React, { useState } from \"react\";\nimport Square from \"./Square.js\";\nimport Snake from \"./Snake\";\n\nfunction Snakeladder() {\n  let start;\n  const [player, setPlayer] = useState(\"X\");\n  const [xvalue, setValuex] = useState(0);\n  const [yvalue, setValuey] = useState(0);\n  const [scorex, setScorex] = useState(0);\n  const [scorey, setScorey] = useState(0);\n  const [result, setResult] = useState(null);\n  const rollDice = () => {\n    if (result) return;\n    let dicevalue = Math.floor(Math.random() * 6) + 1;\n    // if (scorex === 100 || scorey === 100) {\n    //   scorex === 100 ? setResult(\"X\") : setResult(\"Y\");\n    //   return;\n    // }\n\n    if (player === \"X\") {\n      if (100 - scorex > dicevalue) {\n        setValuex(dicevalue);\n        setValuey(0);\n        let x = checkLadderSnake(scorex + dicevalue);\n        // let value = x === 0 ? scorex + dicevalue : x;\n        setScorex(x);\n      } else if (scorex + dicevalue === 100) {\n        setValuex(dicevalue);\n        setValuey(0);\n        setResult(\"X\");\n        setScorex(scorex + dicevalue);\n      } else {\n        setValuex(dicevalue);\n        setValuey(0);\n      }\n    } else {\n      if (100 - scorey > dicevalue) {\n        setValuey(dicevalue);\n        setValuex(0);\n        let y = checkLadderSnake(scorey + dicevalue);\n        // let value = y === 0 ? scorey + dicevalue : y;\n        setScorey(y);\n      } else if (scorey + dicevalue === 100) {\n        setValuey(dicevalue);\n        setValuex(0);\n        setResult(\"Y\");\n        setScorey(scorey + dicevalue);\n      } else {\n        setValuex(0);\n        setValuey(dicevalue);\n      }\n    }\n    setPlayer((player) => {\n      return player === \"X\" ? \"Y\" : \"X\";\n    });\n  };\n\n  const checkLadderSnake = (cellno) => {\n    switch (cellno) {\n      case 2:\n        return 23;\n      case 29:\n        return 66;\n      case 41:\n        return 62;\n      case 50:\n        return 28;\n      default:\n        return cellno;\n    }\n  };\n  const cell = (row) => {\n    let cellarr = [];\n    if (row % 2 !== 0) {\n      for (let col = start; col > start - 10; col--) {\n        cellarr.push(\n          <Square\n            key={col}\n            value={col}\n            player={`${scorex === col ? \"X\" : \"\"}${scorey === col ? \"Y\" : \"\"}`}\n          />\n        );\n      }\n    } else {\n      for (let col = start - 9; col <= start; col++) {\n        cellarr.push(\n          <Square\n            key={col}\n            value={col}\n            player={`${scorex === col ? \"X\" : \"\"}${scorey === col ? \"Y\" : \"\"}`}\n          />\n        );\n      }\n    }\n    start = start - 10;\n    return cellarr;\n  };\n  const square = () => {\n    let sqaurearr = [];\n    start = 100;\n\n    for (let row = 1; row <= 10; row++) {\n      sqaurearr.push(\n        <div key={row} className=\"row\">\n          {cell(row)}\n        </div>\n      );\n    }\n    return sqaurearr;\n  };\n  return (\n    <>\n      <div className=\"Header\">\n        <h2 className=\"title\">SNAKE & LADDER</h2>\n        <span className=\"Player\">\n          {result ? \"Winner:\" + result : \"Player:\" + player}\n        </span>\n\n        <br></br>\n        <span className=\"X\">X-Value:{xvalue}</span>\n        <button className=\"button\" onClick={rollDice}>\n          Roll Dice\n        </button>\n        <span className=\"Y\">Y-Value:{yvalue}</span>\n      </div>\n      <div className=\"container\">\n        <div className=\"Board\">{square()}</div>\n        <Snake />\n      </div>\n    </>\n  );\n}\n\nexport default Snakeladder;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Snake from \"./Snakeladder\";\nReactDOM.render(\n  <React.StrictMode>\n    <Snake />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}